// Include necessary header files
#include <SFML/Graphics.hpp> // SFML graphics library for C++
#include <time.h> // Standard C library for working with time

using namespace sf;

// Constants
const int M = 20; // Height of game field
const int N = 10; // Width of game field

// Game field represented as a 2D array of integers
int field[M][N] = {0};

// Struct to store the position of each block in a tetromino
struct Point
{
    int x, y;
} a[4], b[4];

// Array to store the different tetrominoes
int figures[7][4] =
{
    1,3,5,7, // I
    2,4,5,7, // Z
    3,5,4,6, // S
    3,5,4,7, // T
    2,3,5,7, // L
    3,5,7,6, // J
    2,3,4,5, // O
};

// Function to check if a tetromino is in a valid position
bool check()
{
   // Iterate through each block of the tetromino
   for (int i = 0; i < 4; i++)
   {
      // If the block is outside the boundaries of the game field, return false
      if (a[i].x < 0 || a[i].x >= N || a[i].y >= M)
         return false;
      // If the block is on top of another block, return false
      else if (field[a[i].y][a[i].x])
         return false;
   }

   // If all blocks are in valid positions, return true
   return true;
};

int main()
{
    // Seed the random number generator with the current time
    srand(time(0));     

    // Create the game window
    RenderWindow window(VideoMode(320, 480), "The Game!");

    // Load the textures for the tiles, background, and frame
    Texture t1, t2, t3;
    t1.loadFromFile("images/tiles.png");
    t2.loadFromFile("images/background.png");
    t3.loadFromFile("images/frame.png");

    // Create the sprites for the tiles, background, and frame
    Sprite s(t1), background(t2), frame(t3);

    // Initialize variables for movement, rotation, color, and timing
    int dx = 0; 
    bool rotate = false; 
    int colorNum = 1;
    float timer = 0, delay = 0.3; 

    // Create a clock to keep track of time
    Clock clock;

    // Main game loop
    while (window.isOpen())
    {
        // Calculate the elapsed time since the last loop iteration
        float time = clock.getElapsedTime().asSeconds();
        clock.restart();
        timer += time;

        // Check for events
        Event e;
        while (window.pollEvent(e))
        {
            // If the window is closed, close the game
            if (e.type == Event::Closed)
                window.close();

            // Check for key presses
            if (e.type == Event::KeyPressed)
            {
                // If the up arrow key is pressed, set the rotate flag to true
                if (e.key.code == Keyboard::Up)
                    rotate = true;
                // If the left arrow key is pressed, set the horizontal movement to -1 (left)
                else if (e.key.code == Keyboard::Left)
                    dx = -1;
